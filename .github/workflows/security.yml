# Security Scanning Workflow for LLM Gateway
name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Job 1: Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > audit-results.json || true
        npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Upload audit results
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-results
        path: audit-results.json
    
    - name: Check for high/critical vulnerabilities
      run: |
        HIGH_VULNS=$(npm audit --audit-level=high --json | jq '.metadata.vulnerabilities.high // 0')
        CRITICAL_VULNS=$(npm audit --audit-level=critical --json | jq '.metadata.vulnerabilities.critical // 0')
        
        echo "High vulnerabilities: $HIGH_VULNS"
        echo "Critical vulnerabilities: $CRITICAL_VULNS"
        
        if [[ $CRITICAL_VULNS -gt 0 ]]; then
          echo "❌ Critical vulnerabilities found"
          exit 1
        elif [[ $HIGH_VULNS -gt 5 ]]; then
          echo "⚠️ Too many high-severity vulnerabilities found"
          exit 1
        else
          echo "✅ Dependency scan passed"
        fi

  # Job 2: CodeQL Analysis
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: +security-and-quality
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # Job 3: SAST with Semgrep
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/nodejs
        generateSarif: "1"
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif
      if: always()

  # Job 4: Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Job 5: Docker Image Security Scanning
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: llm-gateway:security-scan
        load: true
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'llm-gateway:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()
    
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

  # Job 6: License Compliance Check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install license-checker
      run: npm install -g license-checker
    
    - name: Check licenses
      run: |
        echo "Checking for problematic licenses..."
        license-checker --summary
        
        # Check for licenses that might be problematic
        PROBLEMATIC=$(license-checker --excludePackages 'llm-gateway@1.0.0' --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;CC0-1.0;Unlicense;WTFPL' --summary 2>&1 || echo "found")
        
        if [[ "$PROBLEMATIC" == *"found"* ]]; then
          echo "⚠️ Found packages with potentially problematic licenses"
          license-checker --excludePackages 'llm-gateway@1.0.0' --csv
          exit 1
        else
          echo "✅ All licenses are compliant"
        fi

  # Job 7: Infrastructure as Code Security
  iac-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Checkov for Docker and K8s
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,kubernetes
        output_format: sarif
        output_file_path: checkov-results.sarif
        soft_fail: true
    
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov-results.sarif
      if: always()

  # Job 8: Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-analysis, sast-scan, secret-scan, docker-security, license-check, iac-security]
    if: always()
    
    steps:
    - name: Security scan summary
      run: |
        echo "=== Security Scan Summary ==="
        echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
        echo "CodeQL Analysis: ${{ needs.codeql-analysis.result }}"
        echo "SAST Scan: ${{ needs.sast-scan.result }}"
        echo "Secret Scan: ${{ needs.secret-scan.result }}"
        echo "Docker Security: ${{ needs.docker-security.result }}"
        echo "License Check: ${{ needs.license-check.result }}"
        echo "IaC Security: ${{ needs.iac-security.result }}"
        
        # Count failures
        FAILURES=0
        
        [[ "${{ needs.dependency-scan.result }}" == "failure" ]] && ((FAILURES++))
        [[ "${{ needs.codeql-analysis.result }}" == "failure" ]] && ((FAILURES++))
        [[ "${{ needs.sast-scan.result }}" == "failure" ]] && ((FAILURES++))
        [[ "${{ needs.secret-scan.result }}" == "failure" ]] && ((FAILURES++))
        [[ "${{ needs.docker-security.result }}" == "failure" ]] && ((FAILURES++))
        [[ "${{ needs.license-check.result }}" == "failure" ]] && ((FAILURES++))
        [[ "${{ needs.iac-security.result }}" == "failure" ]] && ((FAILURES++))
        
        echo "Failed security checks: $FAILURES"
        
        if [[ $FAILURES -gt 0 ]]; then
          echo "❌ Security scan failed"
          echo "Please review the security findings and fix critical issues"
          exit 1
        else
          echo "✅ All security scans passed"
        fi
    
    - name: Create security report issue (on failure)
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const title = `Security Scan Failures - ${new Date().toISOString().split('T')[0]}`;
          const body = `## Security Scan Report
          
          **Date**: ${new Date().toISOString()}
          **Workflow**: ${{ github.workflow }}
          **Run ID**: ${{ github.run_id }}
          
          ### Failed Jobs
          - Dependency Scan: ${{ needs.dependency-scan.result }}
          - CodeQL Analysis: ${{ needs.codeql-analysis.result }}
          - SAST Scan: ${{ needs.sast-scan.result }}
          - Secret Scan: ${{ needs.secret-scan.result }}
          - Docker Security: ${{ needs.docker-security.result }}
          - License Check: ${{ needs.license-check.result }}
          - IaC Security: ${{ needs.iac-security.result }}
          
          Please review the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
          
          ### Actions Required
          1. Review security findings in the Security tab
          2. Update dependencies with known vulnerabilities
          3. Fix any code quality issues identified
          4. Ensure no secrets are committed to the repository
          
          **Labels**: security, automated-issue`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'automated-issue', 'priority-high']
          });