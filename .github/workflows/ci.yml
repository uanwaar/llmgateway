# Continuous Integration Workflow for LLM Gateway
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_DEPENDENCY_PATH: package-lock.json

jobs:
  # Job 1: Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
      continue-on-error: false
    
    - name: Run Prettier check
      run: npx prettier --check "src/**/*.js" "tests/**/*.js"
      continue-on-error: false
    
    - name: TypeScript type checking
      run: npm run type-check
      continue-on-error: false
    
    - name: Check for outdated dependencies
      run: npm outdated || true
    
    - name: Audit dependencies
      run: npm audit --audit-level=moderate
      continue-on-error: true

  # Job 2: Unit Tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
    
    - name: Upload coverage to Codecov
      if: matrix.node-version == 18
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Job 3: Integration Tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Wait for Redis
      run: |
        for i in {1..30}; do
          if redis-cli -h localhost -p 6379 ping | grep -q PONG; then
            echo "Redis is ready"
            break
          fi
          echo "Waiting for Redis..."
          sleep 2
        done
    
    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        REDIS_URL: redis://localhost:6379
        CACHE_ENABLED: true
        CACHE_BACKEND: redis
    
    - name: Upload integration test coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: integration
        name: codecov-integration
        fail_ci_if_error: false

  # Job 4: End-to-End Tests
  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start application
      run: |
        npm start &
        sleep 10
      env:
        NODE_ENV: test
        PORT: 8080
        REDIS_URL: redis://localhost:6379
        CACHE_ENABLED: true
        CACHE_BACKEND: redis
        LOG_LEVEL: error
    
    - name: Wait for application to be ready
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:8080/health; then
            echo "Application is ready"
            break
          fi
          echo "Waiting for application..."
          sleep 2
        done
    
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        GATEWAY_URL: http://localhost:8080
        NODE_ENV: test
    
    - name: Upload E2E test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results
        path: |
          tests/e2e/results/
          logs/

  # Job 5: Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: llm-gateway:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name llm-gateway-test -p 8080:8080 \
          -e NODE_ENV=test \
          -e LOG_LEVEL=error \
          llm-gateway:test
        
        # Wait for container to start
        sleep 15
        
        # Health check
        curl -f http://localhost:8080/health || exit 1
        
        # Stop container
        docker stop llm-gateway-test

  # Job 6: Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start application
      run: |
        npm start &
        sleep 10
      env:
        NODE_ENV: production
        PORT: 8080
        REDIS_URL: redis://localhost:6379
        CACHE_ENABLED: true
        CACHE_BACKEND: redis
    
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        if [ -f "tests/performance/load-test.js" ]; then
          k6 run tests/performance/load-test.js
        else
          echo "Performance tests not found, skipping..."
        fi
    
    - name: Upload performance results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          tests/performance/results/
          logs/

  # Job 7: Build Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-integration, test-e2e, docker-build]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        echo "=== Build Summary ==="
        echo "Lint: ${{ needs.lint.result }}"
        echo "Unit Tests: ${{ needs.test-unit.result }}"
        echo "Integration Tests: ${{ needs.test-integration.result }}"
        echo "E2E Tests: ${{ needs.test-e2e.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        
        if [[ "${{ needs.lint.result }}" == "failure" || 
              "${{ needs.test-unit.result }}" == "failure" || 
              "${{ needs.test-integration.result }}" == "failure" || 
              "${{ needs.test-e2e.result }}" == "failure" || 
              "${{ needs.docker-build.result }}" == "failure" ]]; then
          echo "❌ Build failed"
          exit 1
        else
          echo "✅ Build successful"
        fi