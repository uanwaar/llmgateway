# Release Automation Workflow for LLM Gateway
name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease
      custom_version:
        description: 'Custom version (optional, overrides release_type)'
        required: false
        type: string
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  # Job 1: Check if Release is Needed
  check-release:
    name: Check Release Necessity
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      next_version: ${{ steps.check.outputs.next_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Get latest release
      id: latest_release
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const release = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return release.data.tag_name;
          } catch (error) {
            if (error.status === 404) {
              return 'v0.0.0';
            }
            throw error;
          }
    
    - name: Check if release is needed
      id: check
      run: |
        LAST_RELEASE="${{ steps.latest_release.outputs.result }}"
        echo "Last release: $LAST_RELEASE"
        
        # Get commits since last release
        if [[ "$LAST_RELEASE" == "v0.0.0" ]]; then
          COMMITS_SINCE_RELEASE=$(git rev-list --count HEAD)
        else
          COMMITS_SINCE_RELEASE=$(git rev-list --count ${LAST_RELEASE}..HEAD)
        fi
        
        echo "Commits since release: $COMMITS_SINCE_RELEASE"
        
        # Check for conventional commit types that warrant a release
        if [[ "$LAST_RELEASE" == "v0.0.0" ]]; then
          RELEASE_COMMITS=$(git log --oneline)
        else
          RELEASE_COMMITS=$(git log --oneline ${LAST_RELEASE}..HEAD)
        fi
        
        FEAT_COMMITS=$(echo "$RELEASE_COMMITS" | grep -c "^[a-f0-9]\+ feat" || echo "0")
        FIX_COMMITS=$(echo "$RELEASE_COMMITS" | grep -c "^[a-f0-9]\+ fix" || echo "0")
        BREAKING_COMMITS=$(echo "$RELEASE_COMMITS" | grep -c "BREAKING CHANGE\|^[a-f0-9]\+ feat!:\|^[a-f0-9]\+ fix!:" || echo "0")
        
        echo "Feature commits: $FEAT_COMMITS"
        echo "Fix commits: $FIX_COMMITS"
        echo "Breaking commits: $BREAKING_COMMITS"
        
        # Determine if release is needed
        SHOULD_RELEASE="false"
        RELEASE_TYPE="patch"
        
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          SHOULD_RELEASE="true"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
        elif [[ $BREAKING_COMMITS -gt 0 ]]; then
          SHOULD_RELEASE="true"
          RELEASE_TYPE="major"
        elif [[ $FEAT_COMMITS -gt 0 ]]; then
          SHOULD_RELEASE="true"
          RELEASE_TYPE="minor"
        elif [[ $FIX_COMMITS -gt 0 ]]; then
          SHOULD_RELEASE="true"
          RELEASE_TYPE="patch"
        fi
        
        echo "Should release: $SHOULD_RELEASE"
        echo "Release type: $RELEASE_TYPE"
        
        # Calculate next version
        CURRENT_VERSION=$(echo "$LAST_RELEASE" | sed 's/^v//')
        if [[ "$CURRENT_VERSION" == "0.0.0" ]]; then
          CURRENT_VERSION="0.0.0"
        fi
        
        if [[ -n "${{ github.event.inputs.custom_version }}" ]]; then
          NEXT_VERSION="${{ github.event.inputs.custom_version }}"
        else
          # Use semver to calculate next version
          npm install -g semver
          NEXT_VERSION=$(semver -i $RELEASE_TYPE $CURRENT_VERSION)
        fi
        
        echo "Next version: $NEXT_VERSION"
        
        echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
        echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      if: steps.check.outputs.should_release == 'true'
      run: |
        LAST_RELEASE="${{ steps.latest_release.outputs.result }}"
        
        # Generate changelog
        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        if [[ "$LAST_RELEASE" == "v0.0.0" ]]; then
          echo "## v${{ steps.check.outputs.next_version }} - $(date +%Y-%m-%d)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Initial Release" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --oneline --pretty=format:"- %s (%h)" >> CHANGELOG.md
        else
          echo "## v${{ steps.check.outputs.next_version }} - $(date +%Y-%m-%d)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Categorize commits
          COMMITS=$(git log --oneline --pretty=format:"%s (%h)" ${LAST_RELEASE}..HEAD)
          
          # Features
          FEATURES=$(echo "$COMMITS" | grep "^feat" || echo "")
          if [[ -n "$FEATURES" ]]; then
            echo "### ✨ New Features" >> CHANGELOG.md
            echo "$FEATURES" | sed 's/^/- /' >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Bug fixes
          FIXES=$(echo "$COMMITS" | grep "^fix" || echo "")
          if [[ -n "$FIXES" ]]; then
            echo "### 🐛 Bug Fixes" >> CHANGELOG.md
            echo "$FIXES" | sed 's/^/- /' >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Documentation
          DOCS=$(echo "$COMMITS" | grep "^docs" || echo "")
          if [[ -n "$DOCS" ]]; then
            echo "### 📚 Documentation" >> CHANGELOG.md
            echo "$DOCS" | sed 's/^/- /' >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Performance improvements
          PERF=$(echo "$COMMITS" | grep "^perf" || echo "")
          if [[ -n "$PERF" ]]; then
            echo "### ⚡ Performance Improvements" >> CHANGELOG.md
            echo "$PERF" | sed 's/^/- /' >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Other commits
          OTHER=$(echo "$COMMITS" | grep -v "^feat\|^fix\|^docs\|^perf" || echo "")
          if [[ -n "$OTHER" ]]; then
            echo "### 🔧 Other Changes" >> CHANGELOG.md
            echo "$OTHER" | sed 's/^/- /' >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
        fi
        
        # Output changelog
        CHANGELOG_CONTENT=$(cat CHANGELOG.md)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  # Job 2: Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    outputs:
      release_tag: ${{ steps.create_release.outputs.tag_name }}
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Update version in package.json
      if: github.event.inputs.dry_run != 'true'
      run: |
        npm version ${{ needs.check-release.outputs.next_version }} --no-git-tag-version
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json package-lock.json
        git commit -m "chore: bump version to v${{ needs.check-release.outputs.next_version }}"
    
    - name: Create Git tag
      if: github.event.inputs.dry_run != 'true'
      run: |
        git tag -a "v${{ needs.check-release.outputs.next_version }}" -m "Release v${{ needs.check-release.outputs.next_version }}"
        git push origin main
        git push origin "v${{ needs.check-release.outputs.next_version }}"
    
    - name: Create GitHub Release
      id: create_release
      if: github.event.inputs.dry_run != 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.check-release.outputs.next_version }}
        release_name: Release v${{ needs.check-release.outputs.next_version }}
        body: ${{ needs.check-release.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(needs.check-release.outputs.next_version, '-') }}
    
    - name: Dry run output
      if: github.event.inputs.dry_run == 'true'
      run: |
        echo "=== DRY RUN ==="
        echo "Would create release: v${{ needs.check-release.outputs.next_version }}"
        echo ""
        echo "Changelog:"
        echo "${{ needs.check-release.outputs.changelog }}"

  # Job 3: Build Release Assets
  build-assets:
    name: Build Release Assets  
    runs-on: ubuntu-latest
    needs: [check-release, create-release]
    if: needs.check-release.outputs.should_release == 'true' && github.event.inputs.dry_run != 'true'
    
    strategy:
      matrix:
        platform: [linux-amd64, linux-arm64, darwin-amd64, darwin-arm64, windows-amd64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Create distribution package
      run: |
        mkdir -p dist/llm-gateway-${{ matrix.platform }}
        cp -r dist/* dist/llm-gateway-${{ matrix.platform }}/
        cp -r config/ dist/llm-gateway-${{ matrix.platform }}/
        cp -r docs/ dist/llm-gateway-${{ matrix.platform }}/
        cp package.json dist/llm-gateway-${{ matrix.platform }}/
        cp README.md dist/llm-gateway-${{ matrix.platform }}/
        cp LICENSE dist/llm-gateway-${{ matrix.platform }}/
        
        # Create archive
        cd dist
        if [[ "${{ matrix.platform }}" == *"windows"* ]]; then
          zip -r llm-gateway-${{ needs.check-release.outputs.next_version }}-${{ matrix.platform }}.zip llm-gateway-${{ matrix.platform }}
        else
          tar -czf llm-gateway-${{ needs.check-release.outputs.next_version }}-${{ matrix.platform }}.tar.gz llm-gateway-${{ matrix.platform }}
        fi
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.release_upload_url }}
        asset_path: |
          ${{ matrix.platform == 'windows-amd64' && 
            format('dist/llm-gateway-{0}-{1}.zip', needs.check-release.outputs.next_version, matrix.platform) || 
            format('dist/llm-gateway-{0}-{1}.tar.gz', needs.check-release.outputs.next_version, matrix.platform) }}
        asset_name: |
          ${{ matrix.platform == 'windows-amd64' && 
            format('llm-gateway-{0}-{1}.zip', needs.check-release.outputs.next_version, matrix.platform) || 
            format('llm-gateway-{0}-{1}.tar.gz', needs.check-release.outputs.next_version, matrix.platform) }}
        asset_content_type: |
          ${{ matrix.platform == 'windows-amd64' && 'application/zip' || 'application/gzip' }}

  # Job 4: Update Documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [check-release, create-release]
    if: needs.check-release.outputs.should_release == 'true' && github.event.inputs.dry_run != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: main
    
    - name: Update CHANGELOG.md
      run: |
        # Prepend new changelog to existing CHANGELOG.md
        if [[ -f CHANGELOG.md ]]; then
          cp CHANGELOG.md CHANGELOG.md.old
          echo "${{ needs.check-release.outputs.changelog }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          cat CHANGELOG.md.old >> CHANGELOG.md
          rm CHANGELOG.md.old
        else
          echo "${{ needs.check-release.outputs.changelog }}" > CHANGELOG.md
        fi
    
    - name: Update version in documentation
      run: |
        # Update version references in documentation
        find docs/ -name "*.md" -type f -exec sed -i "s/version: [0-9]\+\.[0-9]\+\.[0-9]\+/version: ${{ needs.check-release.outputs.next_version }}/g" {} \;
        
        # Update Docker image tags in examples
        find examples/ -name "*.sh" -type f -exec sed -i "s/:latest/:v${{ needs.check-release.outputs.next_version }}/g" {} \;
    
    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md docs/ examples/
        git commit -m "docs: update documentation for v${{ needs.check-release.outputs.next_version }}" || echo "No changes to commit"
        git push origin main
    
    - name: Create documentation PR (if needed)
      if: github.event_name == 'workflow_dispatch'
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const version = '${{ needs.check-release.outputs.next_version }}';
          
          // Check if there are any documentation updates needed
          const title = `docs: Update documentation for v${version}`;
          const body = `## Documentation Updates for v${version}
          
          This PR updates the documentation following the release of v${version}.
          
          ### Changes
          - Updated CHANGELOG.md with release notes
          - Updated version references in documentation
          - Updated Docker image tags in examples
          
          ### Release
          - **Version**: v${version}
          - **Release Notes**: See CHANGELOG.md
          
          This PR is automatically created by the release workflow.`;
          
          try {
            await github.rest.pulls.create({
              owner,
              repo,
              title,
              body,
              head: 'main',
              base: 'develop',
              draft: false
            });
          } catch (error) {
            console.log('No PR needed or already exists');
          }

  # Job 5: Notify Release
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [check-release, create-release, build-assets, update-docs]
    if: always() && needs.check-release.outputs.should_release == 'true' && github.event.inputs.dry_run != 'true'
    
    steps:
    - name: Send release notification
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ needs.check-release.outputs.next_version }}';
          const success = '${{ needs.create-release.result }}' === 'success';
          
          const title = success ? 
            `🎉 Release v${version} Published` : 
            `❌ Release v${version} Failed`;
          
          const body = success ? 
            `## 🚀 New Release Available
            
            **Version**: v${version}
            **Release**: [View on GitHub](${{ github.server_url }}/${{ github.repository }}/releases/tag/v${version})
            **Docker**: \`ghcr.io/${{ github.repository }}:v${version}\`
            
            ### What's Changed
            ${{ needs.check-release.outputs.changelog }}
            
            ### Quick Start
            \`\`\`bash
            docker run -p 8080:8080 ghcr.io/${{ github.repository }}:v${version}
            \`\`\`
            
            Happy coding! 🎯` :
            `Release creation failed. Please check the workflow logs for details.`;
          
          // Create discussion post
          try {
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              category_slug: 'announcements'
            });
          } catch (error) {
            console.log('Could not create discussion:', error.message);
          }