# Continuous Deployment Workflow for LLM Gateway
name: CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  deployments: write
  id-token: write

jobs:
  # Job 1: Build and Push Docker Image
  build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix=sha-,format=short
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Job 2: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging-api.your-domain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl for staging
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Deploy to staging
      run: |
        # Update image in deployment
        sed -i "s|image: llm-gateway:latest|image: ${{ needs.build-push.outputs.image-tag }}|g" k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/rbac.yaml
        kubectl apply -f k8s/redis-deployment.yaml
        kubectl apply -f k8s/redis-service.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/hpa.yaml
        
        # Wait for deployment
        kubectl rollout status deployment/llm-gateway -n llm-gateway --timeout=600s
      env:
        NAMESPACE: llm-gateway-staging
    
    - name: Run smoke tests
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Basic health check
        curl -f https://staging-api.your-domain.com/health || exit 1
        
        # Test models endpoint
        curl -f https://staging-api.your-domain.com/v1/models || exit 1
        
        echo "‚úÖ Staging deployment successful"
    
    - name: Notify deployment status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const status = '${{ job.status }}' === 'success' ? '‚úÖ Success' : '‚ùå Failed';
          const environment = 'staging';
          
          const comment = `## Deployment to ${environment}
          
          **Status**: ${status}
          **Environment**: ${environment}
          **Image**: ${{ needs.build-push.outputs.image-tag }}
          **Commit**: ${context.sha.substring(0, 7)}
          **Workflow**: [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ${status === '‚úÖ Success' ? 
            'üöÄ Application is now live at https://staging-api.your-domain.com' : 
            '‚ö†Ô∏è Deployment failed. Please check the logs for details.'}`;
          
          if (context.eventName === 'push') {
            github.rest.repos.createCommitComment({
              owner,
              repo,
              commit_sha: context.sha,
              body: comment
            });
          }

  # Job 3: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-push, deploy-staging]
    if: |
      (startsWith(github.ref, 'refs/tags/v') && needs.deploy-staging.result == 'success') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://api.your-domain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl for production
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Pre-deployment checks
      run: |
        echo "Running pre-deployment checks..."
        
        # Check if staging tests passed (unless force deploy)
        if [[ "${{ github.event.inputs.force_deploy }}" != "true" && "${{ needs.deploy-staging.result }}" != "success" ]]; then
          echo "‚ùå Staging deployment failed. Cannot deploy to production."
          exit 1
        fi
        
        # Check for breaking changes in the last few commits
        BREAKING_CHANGES=$(git log --oneline -10 | grep -i "breaking\|major" || echo "")
        if [[ -n "$BREAKING_CHANGES" ]]; then
          echo "‚ö†Ô∏è Warning: Potential breaking changes detected:"
          echo "$BREAKING_CHANGES"
        fi
        
        echo "‚úÖ Pre-deployment checks passed"
    
    - name: Create deployment
      id: deployment
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const deployment = await github.rest.repos.createDeployment({
            owner,
            repo,
            ref: context.sha,
            environment: 'production',
            description: 'Production deployment',
            auto_merge: false,
            required_contexts: []
          });
          return deployment.data.id;
    
    - name: Deploy to production
      run: |
        # Update image in deployment
        sed -i "s|image: llm-gateway:latest|image: ${{ needs.build-push.outputs.image-tag }}|g" k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/rbac.yaml
        kubectl apply -f k8s/redis-deployment.yaml
        kubectl apply -f k8s/redis-service.yaml
        
        # Rolling deployment with health checks
        kubectl apply -f k8s/deployment.yaml
        kubectl rollout status deployment/llm-gateway -n llm-gateway --timeout=600s
        
        # Apply services and ingress
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/hpa.yaml
        
        echo "‚úÖ Production deployment completed"
      env:
        NAMESPACE: llm-gateway-production
    
    - name: Run production smoke tests
      run: |
        # Wait for service to be ready
        sleep 60
        
        # Comprehensive health checks
        echo "Running production smoke tests..."
        
        # Basic health check
        curl -f https://api.your-domain.com/health || exit 1
        
        # Test models endpoint
        curl -f https://api.your-domain.com/v1/models || exit 1
        
        # Test provider health
        curl -f https://api.your-domain.com/health/providers || exit 1
        
        # Test cache health
        curl -f https://api.your-domain.com/health/cache || exit 1
        
        echo "‚úÖ Production smoke tests passed"
    
    - name: Update deployment status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const deploymentId = '${{ steps.deployment.outputs.result }}';
          const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deploymentId,
            state: status,
            environment: 'production',
            environment_url: 'https://api.your-domain.com',
            description: status === 'success' ? 'Deployment successful' : 'Deployment failed'
          });
    
    - name: Create release (for tagged deployments)
      if: startsWith(github.ref, 'refs/tags/v') && success()
      uses: actions/github-script@v7
      with:
        script: |
          const tag = context.ref.replace('refs/tags/', '');
          const { owner, repo } = context.repo;
          
          // Get commits since last release
          const releases = await github.rest.repos.listReleases({ owner, repo, per_page: 1 });
          const lastRelease = releases.data[0];
          
          let changelog = '';
          if (lastRelease) {
            const comparison = await github.rest.repos.compareCommits({
              owner,
              repo,
              base: lastRelease.tag_name,
              head: tag
            });
            
            changelog = comparison.data.commits
              .map(commit => `- ${commit.commit.message.split('\n')[0]} (${commit.sha.substring(0, 7)})`)
              .join('\n');
          }
          
          const release = await github.rest.repos.createRelease({
            owner,
            repo,
            tag_name: tag,
            name: `Release ${tag}`,
            body: `## Changes\n\n${changelog}\n\n## Docker Image\n\n\`${{ needs.build-push.outputs.image-tag }}\`\n\n## Deployment\n\n‚úÖ Successfully deployed to production at https://api.your-domain.com`,
            draft: false,
            prerelease: tag.includes('-')
          });
          
          console.log(`Created release: ${release.data.html_url}`);

  # Job 4: Rollback (Manual Trigger)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment:
      name: production
    
    steps:
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Rollback deployment
      run: |
        echo "Rolling back to previous deployment..."
        kubectl rollout undo deployment/llm-gateway -n llm-gateway
        kubectl rollout status deployment/llm-gateway -n llm-gateway --timeout=300s
        echo "‚úÖ Rollback completed"
    
    - name: Verify rollback
      run: |
        sleep 30
        curl -f https://api.your-domain.com/health || exit 1
        echo "‚úÖ Rollback verification successful"